#MAJ php-fpm :
docker network create my_net
docker volume create wp_files
docker volume create wp_db

#Linux de test a partir d'une imgage debian :
docker run --name nginx-test -ti --net=my_net -v wp_files:/data/www -p 8000:443 debian:buster

#Install nginx
apt-get update -y && apt-get install -y nginx

#Install openssl for self signed certificate
apt-get update -y && apt-get install -y openssl

#Install vim for convenience
apt-get update -y && apt-get install -y vim

#Install curl for tests
apt-get update -y && apt-get install -y curl

#Check status of nginx
#service nginx status

#for all status
#service --status-all
#scripts sont dans /etc/init

#Reload and restart nginx after each change in /etc/nginx et /etc/nginx/nginx.conf
#Finalement, a eviter, prefer un lancement de nginx direct
service nginx reload && service nginx restart

#A partir de ce moment, on peut acceder au serveur sur un navigateur "localhost:8000"

#Create a pair of RSA 2048 bits keys and the certificate
#openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "/C=FR/ST=IDF/O=Fredo&The_Wailers/CN=localhost" -addext "subjectAltName=DNS:mydomain.com" -keyout /etc/ssl/private/nginx.key -out /etc/ssl/certs/nginx.crt
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "/C=FR/ST=IDF/O=Fredo&The_Wailers/CN=localhost" -keyout /etc/ssl/private/nginx.key -out /etc/ssl/certs/nginx.crt

#to check : localhost

req -x590 : format of the certificate
-nodes : no descypher passphrase needed. So that nginx will be able to open the file
-days 365 : time frame of certificate validity
-newkey rsa:2048 : create the rsa key needed for the certificate
-sub : fill out auto
-addext : Alternate name
-keyout : where to place new private key
-out : where to place new certificate

conf a utiliser pour /etc/nginx/sites-available/default
server	{
		listen	443 ssl;
		ssl_certificate			/etc/ssl/certs/nginx.crt;
		ssl_certificate_key		/etc/ssl/private/nginx.key;
		ssl_protocols			TLSv1.2 TLSv1.3;
		server_name				localhost;

		location / {
			root /data/www;
		}
}

v2 :
server  {
                listen  443 ssl;
                ssl_certificate                 /etc/ssl/certs/nginx.crt;
                ssl_certificate_key             /etc/ssl/private/nginx.key;
                ssl_protocols                   TLSv1.2 TLSv1.3;
                server_name                             localhost;

                location / {
                        root /data/www;
                }

                location ~ \.php$ {
						root /data/www;
						include /etc/nginx/fastcgi_params;
                        #fastcgi_pass            unix:/run/php/php7.3-fpm.sock;
                        fastcgi_pass            php-fpm-test:9000;
                        fastcgi_param           SCRIPT_FILENAME $document_root$fastcgi_script_name;
                }
}

#On cree une page vide de test
mkdir -p /data/www
echo "Hello World from 443" > /data/www/index.html

#On lance nginx (entrypoint du conteneur)
nginx &

#On recharge la conf
nginx -s reload

#On test la conf
nginx -t

#On check que le server repond
curl https://localhost
curl https://localhost --insecure

#La conf est dans /etc/nginx





Nginx : "Engine-x"
Serveur russe d'Igor Sysoev depuis 2004
Peu gourmand et performant
Interface modulaire qu'on active ou non :
- Application Acceleration : chargement plus rapide des contenus
- Reverse Proxying : Proxy inverse (http, TCP, UDP) pour l'acceleration des chargements web
- Chiffrement TLS : echange donnees securisees
- Load Balancing : Repartir les demandes pour decharger le serveur principal
- Videostreaming : Haute perf pour streaming mp4 et FLV

Apache : nouveau process pour chaque requette
Nginx : oriente sur les evenements, ce qui permet travail asynchrone

Envoyer un signal au process principal :
nginx -s <signal>
nginx -s reload par exemple pour prendre en compte les modif de ngxinx.conf (service reload est mieux)
Les id des process de nginx sont dans /var/run/nginx.pid

Beginner's guide :
Master Process : read and eval conf and maintain worker processes
Worker Processes : Process requests
Nginx is event-based model
Nginx consists of modules controllled by directives in conf file:
- Simple directives : name parameter;
- Block directives : name parameter { additional_instruction;}
- Context : block directive that can have other directives inside braces
ex : server in http, location in server

Main context : directives places in conf file outside any context : events, http
location : if several matching, nginx selects the one with longest prefix
On ajoute l'URI a la root specifiee par ex :

Config simpliste de site sous /etc/nginx/sites-available/default

server {
	location / {
		root /data/www;
	}

	location /images/ {
		root /data;
	}
}

permettra de toucher /data/images/photo.jpg en demandant http://localhost/images/photo.jpg
UTILE :
On peut trouver les logs d'acces et d'erreur sous /var/long/nginx/error.log et access.log

Proxy sever :

server {
	location / {
		proxy_pass http://localhost:8080;
	}

	location ~ \.(gif|jpg|png)$ {
		root /data/images;
	}
}

server	{
		listen 8080;
		root /data/up1;
		location / {
		}
}

Maps all requests to /data/up1 of local file system
Root of server context used if no root specified in location
proxy_pass to send request to a proxied server
location ~ regex pour utiliser une regex au lieu strcmp
location ~ prioritaires sur location string qui pourrait aussi correspondre (la plus longue)

FastCGI Proxying :
php-fpm : php-FastCGI Process Manager
Avantage du FastCGI : les processus sont persistants au lieu de creer un nouveau process par demande
To route requests to Fast CGI servers
fastcgi_pass instead of proxy_pass
fastcgi_param to set parameters to the fastCGI server


ex :
    location / {
        fastcgi_pass  localhost:9000;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param QUERY_STRING    $query_string;
    }

How nginx processes a request :
https://nginx.org/en/docs/http/request_processing.html

NGINX tests request's header filed "Host" to determine which server the request should be routed to
If doesn't match any, NGINX will route the request to default server for the port (1st one if no
default_server specified" for the listen directive)
Si mixed name-based and IP-based virtual servers:
1. NGINX tests IP address and port for request
2. NGINX tests HOST header field. If not found, process by defautlt server

RMQ :	$document_root is equal to root directive of server ("/data/www/" par ex)
		$fastcgi_script_name is equal to requested URI ("index.php" par ex)
		SCRIPT_FILENAME vaut donc "/data/www/index.php" pour une requette qui match la location /

Dans le context location, la directive index permet de refaire une requette fictive interne si requete se finit
par un "/"

Configuring HTTPS servers :
https://nginx.org/en/docs/http/configuring_https_servers.html

TLS (Transport Layer Security) est l'evolution du SSL (Secure Sockets Layer)
Protocoles de securisation des echanges
On parle de SSL/TLS
Fonctionne sur mode client/server
Connexion TLS :
Certificat : Clef publique, infos et signature numerique (hash de la clef privee et des infos du certif)
- Soit certificat permet de verifier signature numerique avec autorite de certif (AC) et sa liste de clefs publiques
- soit verif par le navigateur web avec la clef publique du certif

To configure HTTPS server :
- ssl parameter must be enabled on listening sockets in server block
- ssl_certificate location must be specified
- ssl_certficate_key (the private key) location must be specified

(!) ATTENTION :
- ssl_protocols TLSv1.2 TLSv1.3; a precisier (cf sujet Inception)


PHP :
php requieres one of the 3 dependencies to exist on a machine:
libapache2-mod-php
php-fpm
php-cgi

https://www.tecmint.com/connect-nginx-to-php-fpm/
PHP-FPM tourne en background et ecoute des requetes CGI envoyees par nginx qui fonctionne du coup en tant que reverse proxy (interface permet a quelqu'un d'acceder a un server de depuis internet)
Ecoute des requettes depuis un socket UNIX domain ou un socket TCP/IP
UNIX Domain (IPC) : Inter-process communication. For processes runing on same operating system
Security : Only local processes with right permissions can use it, so very secure.
Internet Domain (TCP/IP) : over a network
Security : risk, unless firewall
UNIX domain sockets : faster
TCP/IP : more scalable

PHP-FMP listen address :
Via a ressource pool conf file.
You can run multiple pools of processess with different settings
default is www located /etc/php/7.3/fpm/pool.d/www.conf
change listen conf :
listen = listen_socket_name.sock
Nginx runs as www-data as default, so the socket needs to have the rights access. To change :
listen.owner
listen.group
